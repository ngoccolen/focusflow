package controller;

import javafx.fxml.FXML;
import javafx.scene.control.CheckBox;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import java.util.function.Consumer;
import org.hibernate.Session;
import org.hibernate.Transaction;
import Util.HibernateUtil;
import model.Task;
import javafx.scene.control.Tooltip;
import java.time.format.DateTimeFormatter;

public class CalItemController {
	@FXML private CheckBox taskCheckBox;
	@FXML private AnchorPane calendarItemPane;
	private Task task; //l∆∞u th√¥ng tin task hi·ªán t·∫°i
	private Consumer<Task> onSelect; //Consumer l√† m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ th·ªÉ "ti√™u th·ª•" m·ªôt gi√° tr·ªã m√† b·∫°n truy·ªÅn v√†o
	private Runnable onUpdated; //ƒë·∫°i di·ªán cho m·ªôt ƒëo·∫°n m√£ (task) m√† kh√¥ng nh·∫≠n tham s·ªë ƒë·∫ßu v√†o v√† kh√¥ng tr·∫£ v·ªÅ k·∫øt qu·∫£
	
    public void initialize() {
    	//hi·ªáu ·ª©ng hover khi ƒë∆∞a chu·ªôt v√†o
        calendarItemPane.setOnMouseEntered(e -> calendarItemPane.setOpacity(0.85));
        calendarItemPane.setOnMouseExited(e -> calendarItemPane.setOpacity(1.0));
    }
    
    //c·∫≠p nh·∫≠t giao di·ªán c·ªßa item task tr√™n l·ªãch d·ª±a tr√™n ƒë·ªëi t∆∞·ª£ng Task truy·ªÅn v√†o
	public void setTask(Task task) {
	    this.task = task;
	    taskCheckBox.setText(task.getTitle());
	    taskCheckBox.setSelected(task.isCompleted());
	    // Giao di·ªán theo tr·∫°ng th√°i
        updateStyleBasedOnCompletion(task.isCompleted());
        DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("HH:mm");
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        //DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        StringBuilder tooltipText = new StringBuilder();
        tooltipText.append("üìå Title: ").append(task.getTitle()).append("\n");
        tooltipText.append("üìÖ Date: ").append(task.getDate().format(dateFormatter)).append("\n");
        tooltipText.append("‚è∞ Start: ").append(task.getStart_time().format(timeFormatter)).append("\n");
        if (task.getEnd_time() != null) {
            tooltipText.append("üõë End: ").append(task.getEnd_time().format(timeFormatter)).append("\n");
        }
        if (task.getDeadline() != null) {
            tooltipText.append("‚ö†Ô∏è Deadline: ").append(task.getDeadline().format(dateTimeFormatter));
        }
        //Tooltip l√† m·ªôt ph·∫ßn t·ª≠ giao di·ªán nh·ªè xu·∫•t hi·ªán khi di chu·ªôt ho·∫∑c gi·ªØ chu·ªôt tr√™n m·ªôt th√†nh ph·∫ßn giao di·ªán
        Tooltip tooltip = new Tooltip(tooltipText.toString());
        //C√†i tooltip l√™n to√†n b·ªô v√πng calendarItemPane, khi r√™ chu·ªôt v√†o s·∫Ω hi·ªán ra popup th√¥ng tin chi ti·∫øt.
        Tooltip.install(calendarItemPane, tooltip);
	}
	
	@FXML
	//C·∫≠p nh·∫≠t tr·∫°ng th√°i khi checkbox ƒë∆∞·ª£c tick ho·∫∑c b·ªè tick
	public void handleCheck() {
	    if (task != null) {
	        task.setCompleted(taskCheckBox.isSelected());

	        // c·∫≠p nh·∫≠t v√†o DB
	        try (Session session = HibernateUtil.getSessionFactory().openSession()) {
	            Transaction tx = session.beginTransaction();
	            //D√πng ƒë·ªÉ c·∫≠p nh·∫≠t entity task trong DB.
	            session.merge(task);
	            tx.commit();
	        }
	        // C·∫≠p nh·∫≠t l·∫°i style ngay sau khi l∆∞u
	        updateStyleBasedOnCompletion(task.isCompleted());
	        // C·∫≠p nh·∫≠t giao di·ªán
	        if (onUpdated != null) onUpdated.run(); // g·ªçi l·∫°i giao di·ªán task.fxml n·∫øu c·∫ßn
	    }
	}
	
	//c·∫≠p nh·∫≠t giao di·ªán khi tick checkbox
	private void updateStyleBasedOnCompletion(boolean isDone) {
	    if (isDone) {
	        calendarItemPane.setStyle("-fx-background-color: #dcedc8; -fx-border-radius: 5px; -fx-background-radius: 5px; -fx-effect: dropshadow(gaussian, #a5d6a7, 4, 0, 0, 2);");
	    } else {
	        calendarItemPane.setStyle("-fx-background-color: #fff9c4; -fx-border-radius: 5px; -fx-background-radius: 5px; -fx-effect: dropshadow(gaussian, #fbc02d, 4, 0, 0, 2);");
	    }
	}

	@FXML
	public void handleSelect(MouseEvent e) {
	    if (onSelect != null && task != null) {
	        onSelect.accept(task); // truy·ªÅn task ƒë·ªÉ hi·ªÉn th·ªã trong task.fxml
	    }
	}
	public void setOnSelect(Consumer<Task> onSelect) {
	    this.onSelect = onSelect;
	}
	public void setOnUpdated(Runnable onUpdated) {
	    this.onUpdated = onUpdated;
	}


}
