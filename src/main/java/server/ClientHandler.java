package server;

import java.io.*;
import java.net.*;
import java.time.LocalDateTime;
import java.util.*;

import org.hibernate.Session;

import Util.HibernateUtil;
import model.ChatConversation;
import model.ChatMember;
import model.User;
import model.Message;

public class ClientHandler extends Thread {
    private Socket socket;
    private ObjectOutputStream out;
    private ObjectInputStream in;

    public ClientHandler(Socket socket, ObjectOutputStream out) throws IOException {
        this.socket = socket;
        this.out = out;
        this.in = new ObjectInputStream(socket.getInputStream());
    }

    @Override
    public void run() {
        try {
            while (true) {
                Message message = (Message) in.readObject();

                // ‚úÖ N·∫øu l√† y√™u c·∫ßu "join" ƒë·ªÉ tham gia nh√≥m chat
                if ("join".equals(message.getType())) {
                    int chatId = message.getChatId();

                    ChatServer.addClientToChat(chatId, out);


                    System.out.println("Client joined chatId: " + chatId);
                    continue; // b·ªè qua g·ª≠i broadcast cho lo·∫°i join
                }

                // ‚úÖ N·∫øu l√† ·∫£nh/file th√¨ x·ª≠ l√Ω nh∆∞ c≈© (n·∫øu c·∫ßn)
                if ("image".equals(message.getType()) || "file".equals(message.getType())) {
                    File tempDir = new File("temp_images");
                    if (!tempDir.exists()) {
                        tempDir.mkdir();
                    }

                    String savePath = "temp_images/" + message.getContent();
                    File savedFile = new File(savePath);
                    FileOutputStream fileOut = new FileOutputStream(savedFile);
                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    long remaining = message.getFileSize();

                    InputStream rawIn = socket.getInputStream();
                    while ((bytesRead = rawIn.read(buffer, 0, (int)Math.min(buffer.length, remaining))) > 0) {
                        fileOut.write(buffer, 0, bytesRead);
                        remaining -= bytesRead;
                        if (remaining <= 0) break;
                    }

                    fileOut.close();
                    message.setFilePath(savePath);

                    // ‚úÖ G·ª≠i l·∫°i file t·ªõi c√°c client kh√°c trong nh√≥m
                    ChatServer.broadcastFileToClients(message, savedFile);

                    continue; // Kh√¥ng broadcast l·∫°i n·ªØa v√¨ ƒë√£ broadcast n·ªôi dung file r·ªìi
                }
                if ("create_group".equals(message.getType())) {
                    String groupName = message.getContent();
                    String memberIdStr = message.getFilePath(); // v√≠ d·ª•: "[1, 2, 3]"

                    // 1. Parse danh s√°ch ID t·ª´ chu·ªói JSON d·∫°ng [1,2,3]
                    List<Integer> memberIds = parseMemberIds(memberIdStr);

                    // 2. M·ªü Hibernate session ƒë·ªÉ l∆∞u nh√≥m
                    Session session = HibernateUtil.getSessionFactory().openSession();
                    session.beginTransaction();

                    // 3. T·∫°o ChatConversation m·ªõi
                    ChatConversation chat = new ChatConversation();
                    chat.setGroup(true);
                    chat.setGroupName(groupName); // ‚úÖ T√™n nh√≥m l∆∞u v√†o DB
                    chat.setCreatedAt(LocalDateTime.now());
                    session.save(chat); // chatId ƒë∆∞·ª£c t·ª± sinh

                    // 4. Th√™m c√°c th√†nh vi√™n v√†o nh√≥m
                    for (Integer id : memberIds) {
                        ChatMember member = new ChatMember();
                        member.setChat(chat);
                        User user = session.get(User.class, id);
                        if (user != null) {
                            member.setUser(user);
                            session.save(member);
                        }
                    }

                    session.getTransaction().commit();
                    session.close();

                    // 5. ƒêƒÉng k√Ω client ƒëang k·∫øt n·ªëi (hi·ªán t·∫°i) v√†o nh√≥m
                    ChatServer.addClientToChat(chat.getChatId(), out); // out c·ªßa ng∆∞·ªùi t·∫°o nh√≥m

                    // 6. Log
                    System.out.println("üì¶ Nh√≥m m·ªõi: " + groupName + ", chatId = " + chat.getChatId() + ", members = " + memberIds);

                    // 7. (G·ª£i √Ω n√¢ng cao) Tr·∫£ v·ªÅ th√¥ng b√°o cho client bi·∫øt nh√≥m ƒë√£ ƒë∆∞·ª£c t·∫°o (tu·ª≥ client mu·ªën hi·ªÉn th·ªã kh√¥ng)
                    Message confirmation = new Message("server", "Group created", "group_created", LocalDateTime.now());
                    confirmation.setChatId(chat.getChatId());
                    confirmation.setContent(groupName);
                    out.writeObject(confirmation);
                    out.flush();

                    return;
                }


                // ‚úÖ G·ª≠i cho ƒë√∫ng nh√≥m ng∆∞·ªùi d√πng
                ChatServer.broadcastToChat(message);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private List<Integer> parseMemberIds(String str) {
        List<Integer> list = new ArrayList<>();
        str = str.replaceAll("\\[|\\]|\\s", ""); // x√≥a [, ], space
        if (str.isEmpty()) return list;

        for (String s : str.split(",")) {
            try {
                list.add(Integer.parseInt(s));
            } catch (NumberFormatException e) {
                e.printStackTrace();
            }
        }
        return list;
    }

}
